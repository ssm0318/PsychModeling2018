source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_2.R', echo=TRUE)
install.packages("ggplot2")
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=parm_exp1, ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=parm_exp2, ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=parm_expow, ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=parm_hyp1, ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=parm_hyp2, ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
r2 <- function(p_prd) {1-sum((p_corr-p_prd)^2)/sum((p_corr-mean(p_corr))^2)}
r2_pow1 = r2(pow1(mle_model['POW1',], ll_flag='N'))
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_2.R', echo=TRUE)
install.packages("ggplot2")
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2'], ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW'], ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1'], ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2'], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_2.R', echo=TRUE)
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2',], ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW',], ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1',], ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2',], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes(color='POW1')) +
# stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
# stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
# stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2',], ll_flag='N'), aes(color='EXP2')) +
# stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW',], ll_flag='N'), aes(color='EXPOW')) +
# stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1',], ll_flag='N'), aes(color='HYP1')) +
# stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2',], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
mle_model
mle_model['POW1',]
p +
# stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes(color='POW1')) +
# stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
# stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
# stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2',], ll_flag='N'), aes(color='EXP2')) +
# stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW',], ll_flag='N'), aes(color='EXPOW')) +
# stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1',], ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2',], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/MLE_LSE_2.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_2.R', echo=TRUE)
View(pow1)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_2.R', echo=TRUE)
help(stat_function)
mle_summary
mydata
mle_model
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2',], ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW',], ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1',], ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2',], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
p <- ggplot(data = data.frame(x = c(0,20), y=c(0,1)), mapping = aes(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2',], ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW',], ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1',], ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2',], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
pow1
library(ggplot2)
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
library(ggplot2)
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2',], ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW',], ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1',], ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2',], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
p
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes(x = x))
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2',], ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW',], ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1',], ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2',], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes_string(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2',], ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW',], ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1',], ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2',], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes_string(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2',], ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW',], ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1',], ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2',], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes_string(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=mle_model['POW1',], ll_flag='N'), aes_string(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2',], ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW',], ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1',], ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2',], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
mle_model['POW1',]
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=as.numeric(mle_model['POW1',]), ll_flag='N'), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=mle_model['POW2',], ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=mle_model['EXP1',], ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=mle_model['EXP2',], ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=mle_model['EXPOW',], ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=mle_model['HYP1',], ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=mle_model['HYP2',], ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_2.R', echo=TRUE)
as.numeric(mle_model['EXP1',])
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=as.numeric(mle_model['POW1',]), ll_flag='N'), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=as.numeric(mle_model['POW2',]), ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=as.numeric(mle_model['EXP1',]), ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=as.numeric(mle_model['EXP2',]), ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=as.numeric(mle_model['EXPOW',]), ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=as.numeric(mle_model['HYP1',]), ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=as.numeric(mle_model['HYP2',]), ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_2.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_2.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_2.R', echo=TRUE)
r2 <- function(p_prd) {1-sum((p_corr-p_prd)^2)/sum((p_corr-mean(p_corr))^2)}
r2_pow1 = r2(pow1(mle_model_par['POW1',], ll_flag='N'))
r2 <- function(p_prd) {1-sum((p_corr-p_prd)^2)/sum((p_corr-mean(p_corr))^2)}
r2_pow1 = r2(pow1(as.numeric(mle_model_par['POW1',]), ll_flag='N'))
r2_pow2 = r2(pow2(as.numeric(mle_model_par['POW2',]), ll_flag='N'))
mle_model_par
r2_hyp2 = r2(hyp2(as.numeric(mle_model_par['HYP2',]), ll_flag='N'))
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_2.R', echo=TRUE)
pow1 <- function(param, x=t_int, y=p_corr) {
sum <- 0
for (i in c(1:length(x))) {
dev <- ((x[i]+1) ^ (-param[1])) - y[i]
sum <- sum + dev^2
}
return (sum)
}
t_int <- c(0.5, 1, 2, 4, 8, 12, 16, 18) # time interval values
p_corr <- n_corr/n_total # proportion correct
pow1(0.414)
pow1 <- function(param, x=t_int, y=p_corr) {
sum <- 0
for (i in c(1:length(x))) {
dev <- param[1]*((x[i]+1) ^ (-param[2])) - y[i]
sum <- sum + dev^2
}
return (sum)
}
pow1(c(0.964,0.414))
help(optim)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
param_pow1_low <- c(0); param_pow1_up <- c(3); # lower and upper bounds of POW1 model (0<b<3)
param_pow2_low <- c(0, 0); param_pow2_up <- c(1, 3);  # lower and upper bounds of POW2 model (0<a<1, 0<b<3)
param_exp1_low <- c(0); param_exp1_up <- c(3);  # lower and upper bounds of EXP1 model (0<b<3)
param_exp2_low <- c(0, 0); param_exp2_up <- c(1, 3);  # lower and upper bounds of EXP2 model (0<a<1, 0<b<3)
param_expow_low <- c(0, 0, -Inf); param_expow_up <- c(1, Inf, 3);  # lower and upper bounds of EXPOW model (0<a<1, 0<b, c<3)
param_hyp1_low <- c(0); param_hyp1_up <- c(1);  # lower and upper bounds of HYP1 model (0<b<1)
param_hyp2_low <- c(0, 0); param_hyp2_up <- c(1, 1);  # lower and upper bounds of HYP2 model (0<a<1, 0<b<1)
lse_iter <- function(num_par, f, low, up) {
# Set non-interfering initial value of lse model
lse_model <- c(NA)
lse_model$value <- -10E10
# Try many different inits to escape from the local maxima
for(i in 1:100) {
# Random inits generated on the spot for each iteration
temp_lse <- optim(runif(num_par), f, method="L-BFGS-B", lower=low, upper=up)
# Replace the results if the latest optimization yields better result
if(temp_lse$value > lse_model$value) mle_model <- temp_mle
}
return (mle_model)
}
lse_model_pow1 <- lse_iter(1, pow1, param_pow1_low, param_pow1_up)
pow1 <- function(param, x=t_int, y=p_corr) {
sum <- 0
for (i in c(1:length(x))) {
dev <- ((x[i]+1) ^ (-param[2])) - y[i]
print(dev)
sum <- sum + dev^2
}
return (sum)
}
lse_model_pow1 <- lse_iter(1, pow1, param_pow1_low, param_pow1_up)
pow1 <- function(param, x=t_int, y=p_corr) {
sum <- 0
for (i in c(1:length(x))) {
dev <- ((x[i]+1) ^ (-param[2])) - y[i]
print(x[i])
print(y[i])
print(dev)
sum <- sum + dev^2
}
return (sum)
}
lse_model_pow1 <- lse_iter(1, pow1, param_pow1_low, param_pow1_up)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/LSE.R', echo=TRUE)
lse_model_pow1 <- lse_iter(1, pow1, param_pow1_low, param_pow1_up)
lse_iter <- function(num_par, f, low, up) {
# Set non-interfering initial value of lse model
lse_model <- c(NA)
lse_model$value <- -10E10
# Try many different inits to escape from the local maxima
for(i in 1:100) {
# Random inits generated on the spot for each iteration
temp_lse <- optim(runif(num_par), f, method="L-BFGS-B", lower=low, upper=up)
# Replace the results if the latest optimization yields better result
if(temp_lse$value > lse_model$value) lse_model <- temp_lse
}
return (mle_model)
}
lse_model_pow1 <- lse_iter(1, pow1, param_pow1_low, param_pow1_up)
lse_iter <- function(num_par, f, low, up) {
# Set non-interfering initial value of lse model
lse_model <- c(NA)
lse_model$value <- -10E10
# Try many different inits to escape from the local maxima
for(i in 1:100) {
# Random inits generated on the spot for each iteration
temp_lse <- optim(runif(num_par), f, method="L-BFGS-B", lower=low, upper=up)
# Replace the results if the latest optimization yields better result
if(temp_lse$value > lse_model$value) lse_model <- temp_lse
}
return (lse_model)
}
lse_model_pow1 <- lse_iter(1, pow1, param_pow1_low, param_pow1_up)
lse_model_pow2 <- lse_iter(2, pow2, param_pow2_low, param_pow2_up)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
lse_model_par
r2 <- function(p_prd) {1-sum((p_corr-p_prd)^2)/sum((p_corr-mean(p_corr))^2)}
r2_pow1 = r2(pow1(as.numeric(lse_model_par['POW1',])))
r2 <- function(sse) {
ssr <- 0
for(i in p_corr) {
ssr <- ssr + (i-mean(p_corr))^2
}
return (ssr/(ssr+sse))
}
r2_pow1 = r2(pow1(as.numeric(lse_model_par['POW1',])))
r2_pow2 = r2(pow2(as.numeric(lse_model_par['POW2',])))
r2_exp1 = r2(exp1(as.numeric(lse_model_par['EXP1',])))
r2_exp2 = r2(exp2(as.numeric(lse_model_par['EXP2',])))
r2_expow = r2(expow(as.numeric(lse_model_par['EXPOW',])))
r2_hyp1 = r2(hyp1(as.numeric(lse_model_par['HYP1',])))
r2_hyp2 = r2(hyp2(as.numeric(lse_model_par['HYP2',])))
mean(p_corr)
print(sse)
r2 <- function(sse) {
ssr <- 0
for(i in p_corr) {
ssr <- ssr + (i-mean(p_corr))^2
}
print(sse)
return (ssr/(ssr+sse))
}
r2_pow1 = r2(pow1(as.numeric(lse_model_par['POW1',])))
r2_pow2 = r2(pow2(as.numeric(lse_model_par['POW2',])))
r2_exp2 = r2(exp2(as.numeric(lse_model_par['EXP2',])))
r2 <- function(sse) {
ssto <- 0
for(i in p_corr) {
ssto <- ssto + (i-mean(p_corr))^2
}
return (sse/ssto)
}
r2_pow1 = r2(pow1(as.numeric(lse_model_par['POW1',])))
r2_pow2 = r2(pow2(as.numeric(lse_model_par['POW2',])))
r2 <- function(sse) {
ssto <- 0
for(i in p_corr) {
ssto <- ssto + (i-mean(p_corr))^2
}
return (1-(sse/ssto))
}
r2_pow1 = r2(pow1(as.numeric(lse_model_par['POW1',])))
r2_pow2 = r2(pow2(as.numeric(lse_model_par['POW2',])))
r2_exp1 = r2(exp1(as.numeric(lse_model_par['EXP1',])))
r2_exp2 = r2(exp2(as.numeric(lse_model_par['EXP2',])))
lse_model_par
lse_model_pow1 <- lse_iter(1, pow1, param_pow1_low, param_pow1_up)
lse_model_par
param_pow1_low <- c(0); param_pow1_up <- c(3); # lower and upper bounds of POW1 model (0<b<3)
param_pow2_low <- c(0, 0); param_pow2_up <- c(1, 3);  # lower and upper bounds of POW2 model (0<a<1, 0<b<3)
param_exp1_low <- c(0); param_exp1_up <- c(3);  # lower and upper bounds of EXP1 model (0<b<3)
param_exp2_low <- c(0, 0); param_exp2_up <- c(1, 3);  # lower and upper bounds of EXP2 model (0<a<1, 0<b<3)
param_expow_low <- c(0, 0, -Inf); param_expow_up <- c(1, Inf, 3);  # lower and upper bounds of EXPOW model (0<a<1, 0<b, c<3)
param_hyp1_low <- c(0); param_hyp1_up <- c(1);  # lower and upper bounds of HYP1 model (0<b<1)
param_hyp2_low <- c(0, 0); param_hyp2_up <- c(1, 1);  # lower and upper bounds of HYP2 model (0<a<1, 0<b<1)
lse_iter <- function(num_par, f, low, up) {
# Set non-interfering initial value of lse model
lse_model <- c(NA)
lse_model$value <- -10E10
# Try many different inits to escape from the local maxima
for(i in 1:100) {
# Random inits generated on the spot for each iteration
temp_lse <- optim(runif(num_par), f, method="L-BFGS-B", lower=low, upper=up)
# Replace the results if the latest optimization yields better result
if(temp_lse$value > lse_model$value) lse_model <- temp_lse
}
return (lse_model)
}
lse_model_pow1 <- lse_iter(1, pow1, param_pow1_low, param_pow1_up)
lse_model_pow2 <- lse_iter(2, pow2, param_pow2_low, param_pow2_up)
lse_model_exp1 <- lse_iter(1, exp1, param_exp1_low, param_exp1_up)
lse_model_exp2 <- lse_iter(2, exp2, param_exp2_low, param_exp2_up)
lse_model_expow <- lse_iter(3, expow, param_expow_low, param_expow_up)
lse_model_hyp1 <- lse_iter(1, hyp1, param_hyp1_low, param_hyp1_up)
lse_model_hyp2 <- lse_iter(2, hyp2, param_hyp2_low, param_hyp2_up)
n <- max(length(lse_model_pow1$par), length(lse_model_pow2$par), length(lse_model_exp1$par), length(lse_model_exp2$par),
length(lse_model_expow$par), length(lse_model_hyp1$par), length(lse_model_hyp2$par))
length(lse_model_pow1$par) <- n
length(lse_model_pow2$par) <- n
length(lse_model_exp1$par) <- n
length(lse_model_exp2$par) <- n
length(lse_model_expow$par) <- n
length(lse_model_hyp1$par) <- n
length(lse_model_hyp2$par) <- n
sse_pow1 = pow1(as.numeric(lse_model_par['POW1',]))
sse_pow2 = pow2(as.numeric(lse_model_par['POW2',]))
sse_exp1 = exp1(as.numeric(lse_model_par['EXP1',]))
sse_exp2 = exp2(as.numeric(lse_model_par['EXP2',]))
sse_expow = expow(as.numeric(lse_model_par['EXPOW',]))
sse_hyp1 = hyp1(as.numeric(lse_model_par['HYP1',]))
sse_hyp2 = hyp2(as.numeric(lse_model_par['HYP2',]))
r2 <- function(sse) {
ssto <- 0
for(i in p_corr) {
ssto <- ssto + (i-mean(p_corr))^2
}
return (1-(sse/ssto))
}
r2_pow1 = r2(sse_pow1)
r2_pow2 = r2(sse_pow2)
r2_exp1 = r2(sse_exp1)
r2_exp2 = r2(sse_exp2)
r2_expow = r2(sse_expow)
r2_hyp1 = r2(sse_hyp1)
r2_hyp2 = r2(sse_hyp2)
sse = round(c(sse_pow1, sse_pow2, sse_exp1, sse_exp2, sse_expow, sse_hyp1, sse_hyp2), 3)
r2_lse <- round(c(r2_pow1, r2_pow2, r2_exp1, r2_exp2, r2_expow, r2_hyp1, r2_hyp2), 3)
pars_lse <- round(lse_model_par,3)
lse_summary = data.frame(Models = names, par = pars_lse, loglik = - minus_loglik_LSE, r2 = r2_lse)
mydata <- data.frame(t_int, p_corr)
lse_summary
sse = round(c(sse_pow1, sse_pow2, sse_exp1, sse_exp2, sse_expow, sse_hyp1, sse_hyp2), 3)
r2_lse <- round(c(r2_pow1, r2_pow2, r2_exp1, r2_exp2, r2_expow, r2_hyp1, r2_hyp2), 3)
pars_lse <- round(lse_model_par,3)
lse_summary = data.frame(Models = names, par = pars_lse, sse = sse, r2 = r2_lse)
lse_summary
sse = round(c(sse_pow1, sse_pow2, sse_exp1, sse_exp2, sse_expow, sse_hyp1, sse_hyp2), 4)
r2_lse <- round(c(r2_pow1, r2_pow2, r2_exp1, r2_exp2, r2_expow, r2_hyp1, r2_hyp2), 3)
pars_lse <- round(lse_model_par,3)
lse_summary = data.frame(Models = names, par = pars_lse, sse = sse, r2 = r2_lse)
lse_summary
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=as.numeric(lse_model_par['POW1',])), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=as.numeric(lse_model_par['POW2',])), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=as.numeric(lse_model_par['EXP1',])), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=as.numeric(lse_model_par['EXP2',])), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=as.numeric(lse_model_par['EXPOW',])), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=as.numeric(lse_model_par['HYP1',])), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=as.numeric(lse_model_par['HYP2',])), aes(color='HYP2')) +
labs(title='LSE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
pow1 <- function(param, int=t_int, ll_flag='Y') {p <- (int+1) ^ (-param[1])}
pow2 <- function(param, int=t_int, ll_flag='Y') {p <- param[1] * (1+int) ^ (-param[2])}
exp1 <- function(param, int=t_int, ll_flag='Y') {p <- exp((-param[1]) * int)}
exp2 <- function(param, int=t_int, ll_flag='Y') {p <- param[1] * exp((-param[2])*int)}
expow <- function(param, int=t_int, ll_flag='Y') {p <- param[1] * exp((-param[2])*int) * (int+1) ^ (-param[3])}
hyp1 <- function(param, int=t_int, ll_flag='Y') {p <- 1 / (1+param[1]*int)}
hyp2 <- function(param, int=t_int, ll_flag='Y') {p <- param[1] / (1+param[2]*int)}
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=as.numeric(lse_model_par['POW1',])), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=as.numeric(lse_model_par['POW2',])), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=as.numeric(lse_model_par['EXP1',])), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=as.numeric(lse_model_par['EXP2',])), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=as.numeric(lse_model_par['EXPOW',])), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=as.numeric(lse_model_par['HYP1',])), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=as.numeric(lse_model_par['HYP2',])), aes(color='HYP2')) +
labs(title='LSE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
lse_model_par
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
lse_model_pow1
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
sse = round(c(sse_pow1, sse_pow2, sse_exp1, sse_exp2, sse_expow, sse_hyp1, sse_hyp2), 4)
r2_lse <- round(c(r2_pow1, r2_pow2, r2_exp1, r2_exp2, r2_expow, r2_hyp1, r2_hyp2), 3)
pars_lse <- round(cbind(lse_model_pow1$par, lse_model_pow2$par, lse_model_exp1$par, lse_model_exp2$par,
lse_model_expow$par, lse_model_hyp1$par, lse_model_hyp2$par),3)
lse_summary = data.frame(Models = names, par = pars_lse, sse = sse, r2 = r2_lse)
sse
sse_pow1 = lse_pow1(lse_model_pow1$par)
sse_pow2 = lse_pow2(lse_model_pow1$par)
sse_exp1 = lse_exp1(lse_model_exp1$par)
sse_exp2 = lse_exp2(lse_model_exp2$par)
sse_expow = lse_expow(lse_model_expow$par)
sse_hyp1 = lse_hyp1(lse_model_hyp1$par)
sse_hyp2 = lse_hyp2(lse_model_hyp2$par)
sse_pow1 = lse_pow1(lse_model_pow1$par)
sse_pow2 = lse_pow2(lse_model_pow2$par)
sse_exp1 = lse_exp1(lse_model_exp1$par)
sse_exp2 = lse_exp2(lse_model_exp2$par)
sse_expow = lse_expow(lse_model_expow$par)
sse_hyp1 = lse_hyp1(lse_model_hyp1$par)
sse_hyp2 = lse_hyp2(lse_model_hyp2$par)
sse = round(c(sse_pow1, sse_pow2, sse_exp1, sse_exp2, sse_expow, sse_hyp1, sse_hyp2), 4)
sse
r2_lse
r2_pow1 = r2(sse_pow1)
r2_pow2 = r2(sse_pow2)
r2_exp1 = r2(sse_exp1)
r2_exp2 = r2(sse_exp2)
r2_expow = r2(sse_expow)
r2_hyp1 = r2(sse_hyp1)
r2_hyp2 = r2(sse_hyp2)
r2_lse <- round(c(r2_pow1, r2_pow2, r2_exp1, r2_exp2, r2_expow, r2_hyp1, r2_hyp2), 3)
pars_lse <- round(cbind(lse_model_pow1$par, lse_model_pow2$par, lse_model_exp1$par, lse_model_exp2$par,
lse_model_expow$par, lse_model_hyp1$par, lse_model_hyp2$par),3)
lse_summary = data.frame(Models = names, par = pars_lse, sse = sse, r2 = r2_lse)
r2_lse
pars_lse
pars_lse <- round(rbind(lse_model_pow1$par, lse_model_pow2$par, lse_model_exp1$par, lse_model_exp2$par,
lse_model_expow$par, lse_model_hyp1$par, lse_model_hyp2$par),3)
lse_summary = data.frame(Models = names, par = pars_lse, sse = sse, r2 = r2_lse)
names = c("POW1", "POW2", "EXP1", "EXP2", "EXPOW", "HYP1", "HYP2")
lse_summary = data.frame(Models = names, par = pars_lse, sse = sse, r2 = r2_lse)
lse_summary
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
library(ggplot2)
library(RColorBrewer)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
library(ggplot2)
library(RColorBrewer)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_2.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/LSE.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)
source('~/Dropbox/5-1/실험심리세미나/HW1/HW1_student_version/Parm_Estm_LSE.R', echo=TRUE)

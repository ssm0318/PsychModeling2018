#######################################################
## MLE_LSE_2.R                                       ##
## Maximum Likelihood Estimation (Myung, 2003)       ##
## By Yun Tang, Psychology, OSU                      ##
##                                                   ##
## Functions Calculating Log-Likelihood              ##
## Code Written on 12/18/2009                        ##
##                                                   ##
## Modified by Joonsuk Park on Jan 28 2015           ##
## Modified by Jay Myung in Feb 2017                 ##
## Modified by Woo-Young Ahn in March 2018           ##
## Modified by JaeWon Kim in March 2018              ##
#######################################################
# minus log-likelihood of predicted probability
loglik <- function(p, n=n_total, x=n_corr) {
# ensure 0 < p < 1
p[p<=0] <- 10e-6
p[p>=1] <- 1 - 10e-6
# Calculate minus log-likelihood
loglik <- (-1) * (x * log(p) + (n-x) * log(1-p))
# return the summed minus log-likelihood as the function value
sum(loglik)
}
# predicted probability by parameters
pow1 <- function(param, int=t_int, ll_flag='Y') {
p <- (int+1) ^ (-param[1])
if(ll_flag == 'Y') {
return (loglik(p))
}
return (p)
}
pow2 <- function(param, int=t_int, ll_flag='Y') {
p <- param[1] * (1+int) ^ (-param[2])
if(ll_flag == 'Y') {
return (loglik(p))
}
return (p)
}
exp1 <- function(param, int=t_int, ll_flag='Y') {
p <- exp((-param[1]) * int)
if(ll_flag == 'Y') {
return (loglik(p))
}
return (p)
}
exp2 <- function(param, int=t_int, ll_flag='Y') {
p <- param[1] * exp((-param[2])*int)
if(ll_flag == 'Y') {
return (loglik(p))
}
return (p)
}
expow <- function(param, int=t_int, ll_flag='Y') {
p <- param[1] * exp((-param[2])*int) * (int+1) ^ (-param[3])
if(ll_flag == 'Y') {
return (loglik(p))
}
return (p)
}
hyp1 <- function(param, int=t_int, ll_flag='Y') {
p <- 1 / (1+param[1]*int)
if(ll_flag == 'Y') {
return (loglik(p))
}
return (p)
}
hyp2 <- function(param, int=t_int, ll_flag='Y') {
p <- param[1] / (1+param[2]*int)
if(ll_flag == 'Y') {
return (loglik(p))
}
return (p)
}
#######################################################
## Parm_Estm_2.R                                     ##
## PSYCH 7695, Spring 2017                           ##
## Maximum Likelihood Estimation (Myung, JMP, 2003)  ##
## By Yun Tang, Psychology, OSU                      ##
##                                                   ##
## Main Program                                      ##
## Code Written on 12/18/2009                        ##
##                                                   ##
## Modified by Joonsuk Park on Jan 28 2015           ##
## Modified by Jay Myung in Feb 2017                 ##
## Modified by Woo-Young Ahn in March 2018           ##
## Modified by JaeWon Kim in March 2018              ##
#######################################################
# Goals of Modification: minimizing rewrite of functions / unnecessary variables
rm(list=ls())  # clear workspace
graphics.off() # close all figures
options(warn=-1) # turn off warnings
source("MLE_2.R")   # source MLE_LSE.R code
##########################
## General Setup        ##
## Data and Parameters  ##
##########################
n_total <- 50 # sample size
t_int <- c(0.5, 1, 2, 4, 8, 12, 16, 18) # time interval values
n_corr <- c(44, 34, 27, 26, 19, 17, 20, 11) # number of correct responses
p_corr <- n_corr/n_total # proportion correct
param_pow1_low <- c(0); param_pow1_up <- c(3); # lower and upper bounds of POW1 model (0<b<3)
param_pow2_low <- c(0, 0); param_pow2_up <- c(1, 3);  # lower and upper bounds of POW2 model (0<a<1, 0<b<3)
param_exp1_low <- c(0); param_exp1_up <- c(3);  # lower and upper bounds of EXP1 model (0<b<3)
param_exp2_low <- c(0, 0); param_exp2_up <- c(1, 3);  # lower and upper bounds of EXP2 model (0<a<1, 0<b<3)
param_expow_low <- c(0, 0, -Inf); param_expow_up <- c(1, Inf, 3);  # lower and upper bounds of EXPOW model (0<a<1, 0<b, c<3)
param_hyp1_low <- c(0); param_hyp1_up <- c(1);  # lower and upper bounds of HYP1 model (0<b<1)
param_hyp2_low <- c(0, 0); param_hyp2_up <- c(1, 1);  # lower and upper bounds of HYP2 model (0<a<1, 0<b<1)
##########################
## MLE                  ##
##########################
# Try many different inits to escape from the local maxima
mle_iter <- function(num_par, f, low, up) {
# Set non-interfering initial value of mle model
mle_model <- c(NA)
mle_model$value <- 10E10
# Try many different inits to escape from the local maxima
for(i in 1:100) {
# Random inits generated on the spot for each iteration
temp_mle <- optim(runif(num_par), f, method="L-BFGS-B", lower=low, upper=up)
# Replace the results if the latest optimization yields better result
if(temp_mle$value < mle_model$value) mle_model <- temp_mle
}
return (mle_model)
}
# Do the MLE
mle_model_pow1 <- mle_iter(1, pow1, param_pow1_low, param_pow1_up)
mle_model_pow2 <- mle_iter(2, pow2, param_pow2_low, param_pow2_up)
mle_model_exp1 <- mle_iter(1, exp1, param_exp1_low, param_exp1_up)
mle_model_exp2 <- mle_iter(2, exp2, param_exp2_low, param_exp2_up)
mle_model_expow <- mle_iter(3, expow, param_expow_low, param_expow_up)
mle_model_hyp1 <- mle_iter(1, hyp1, param_hyp1_low, param_hyp1_up)
mle_model_hyp2 <- mle_iter(2, hyp2, param_hyp2_low, param_hyp2_up)
# Make the parameter lists of the same lengths to prevent unnecessary copies of the parameters
n <- max(length(mle_model_pow1$par), length(mle_model_pow2$par), length(mle_model_exp1$par), length(mle_model_exp2$par),
length(mle_model_expow$par), length(mle_model_hyp1$par), length(mle_model_hyp2$par))
length(mle_model_pow1$par) <- n
length(mle_model_pow2$par) <- n
length(mle_model_exp1$par) <- n
length(mle_model_exp2$par) <- n
length(mle_model_expow$par) <- n
length(mle_model_hyp1$par) <- n
length(mle_model_hyp2$par) <- n
# Save the MLE parameter estimates
names = c("POW1", "POW2", "EXP1", "EXP2", "EXPOW", "HYP1", "HYP2")
mle_model_par <- as.data.frame(rbind(mle_model_pow1$par, mle_model_pow2$par, mle_model_exp1$par, mle_model_exp2$par,
mle_model_expow$par, mle_model_hyp1$par, mle_model_hyp2$par))
rownames(mle_model_par) <- names
colnames(mle_model_par) <- c("par1", "par2", "par3")
# number of parameters K
K = c(1, 2, 1, 2, 3, 1, 2)
mle_model_par <- cbind(mle_model_par, K)
# number of data points N
N = length(p_corr)
# Proportion of the explained variances for each model
r2 <- function(p_prd) {1-sum((p_corr-p_prd)^2)/sum((p_corr-mean(p_corr))^2)}
r2_pow1 = r2(pow1(as.numeric(mle_model_par['POW1',]), ll_flag='N'))
r2_pow2 = r2(pow2(as.numeric(mle_model_par['POW2',]), ll_flag='N'))
r2_exp1 = r2(exp1(as.numeric(mle_model_par['EXP1',]), ll_flag='N'))
r2_exp2 = r2(exp2(as.numeric(mle_model_par['EXP2',]), ll_flag='N'))
r2_expow = r2(expow(as.numeric(mle_model_par['EXPOW',]), ll_flag='N'))
r2_hyp1 = r2(hyp1(as.numeric(mle_model_par['HYP1',]), ll_flag='N'))
r2_hyp2 = r2(hyp2(as.numeric(mle_model_par['HYP2',]), ll_flag='N'))
# Generate data frame
minus_loglik_MLE = c(mle_model_pow1$value, mle_model_pow2$value, mle_model_exp1$value, mle_model_exp2$value,
mle_model_expow$value, mle_model_hyp1$value, mle_model_hyp2$value)
r2_mle <- round(c(r2_pow1, r2_pow2, r2_exp1, r2_exp2, r2_expow, r2_hyp1, r2_hyp2), 3)
pars_mle <- round(mle_model_par,3)
mle_summary = data.frame(pars_mle, m_loglik = minus_loglik_MLE, r2 = r2_mle)
# Compute AIC and BIC, attach to data frame
AIC_BIC <- function(mle_summary) {
# Define empty columns AIC and BIC
mle_summary [, "AIC"] <- NA
mle_summary [, "BIC"] <- NA
# Loop through all given models
for(n in 1:nrow(mle_summary)) {
model_data <- mle_summary[n, ]
# Compute AIC = -2*log(lik) + 2*K
curr_AIC <- as.numeric(2*model_data["m_loglik"] + 2*model_data["K"])
# Compute BIC = -2*log(lik) + K*log(N)
curr_BIC <- as.numeric(2*model_data["m_loglik"] + model_data["K"]*log(N))
mle_summary[n, "AIC"] <- round(curr_AIC, 3)
mle_summary[n, "BIC"] <- round(curr_BIC, 3)
}
return (mle_summary)
}
mle_summary <- AIC_BIC(mle_summary)
mle_summary[ ,"m_loglik"] <- round(mle_summary["m_loglik"], 3) # round -loglik
# Plot the MLE results using ggplot (although there's nothing fancy about these graphs)
#install.packages("ggplot2")
library(ggplot2)
library(RColorBrewer)
# Generate data frame of data points
mydata <- data.frame(t_int, p_corr)
# Plot data points
p <- ggplot(data = data.frame(x = c(0,20)), mapping = aes(x = x)) +
geom_point(data=mydata, aes(x=t_int, y=p_corr, size=3))
# Plot each model using stat_function
p +
stat_function(fun = pow1, linetype = "dashed", args=list(param=as.numeric(mle_model_par['POW1',]), ll_flag='N'), aes(color='POW1')) +
stat_function(fun = pow2, linetype = "dashed", args=list(param=as.numeric(mle_model_par['POW2',]), ll_flag='N'), aes(color='POW2')) +
stat_function(fun = exp1, linetype = "dashed", args=list(param=as.numeric(mle_model_par['EXP1',]), ll_flag='N'), aes(color='EXP1')) +
stat_function(fun = exp2, linetype = "dashed", args=list(param=as.numeric(mle_model_par['EXP2',]), ll_flag='N'), aes(color='EXP2')) +
stat_function(fun = expow, linetype = "dashed", args=list(param=as.numeric(mle_model_par['EXPOW',]), ll_flag='N'), aes(color='EXPOW')) +
stat_function(fun = hyp1, linetype = "dashed", args=list(param=as.numeric(mle_model_par['HYP1',]), ll_flag='N'), aes(color='HYP1')) +
stat_function(fun = hyp2, linetype = "dashed", args=list(param=as.numeric(mle_model_par['HYP2',]), ll_flag='N'), aes(color='HYP2')) +
labs(title='MLE results', x="Time t", y="Proportion Correct") +
theme(plot.title = element_text(hjust = 0.5)) + scale_color_hue("Model Type") + guides(size = FALSE)
# Print MLE results and best-fit parameters
print('- MLE results ------------')
print(mle_summary, 5)
mle_summary
expression(delta)
x <- expression(delta)
x
mle_summary$d_AIC <- mle_summary$AIC - min(mle_summary$AIC)
mle_summary
mle_summary$d_BIC <- mle_summary$BIC - min(mle_summary$BIC) #calculate delta BIC
mle_summary
